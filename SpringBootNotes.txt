STARTING SPRING BOOT PROJECT

1. New "Spring Starter Project"

	-MySQL Driver | Spring Boot Dev Tools | Spring Data JPA | Spring Web

2. Add following to pom.xml

		<dependency>
			<groupId>org.apache.tomcat.embed</groupId>
			<artifactId>tomcat-embed-jasper</artifactId>
		</dependency>
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>jstl</artifactId>
		</dependency>
		<dependency> 
	    		<groupId>org.springframework.boot</groupId> 
	    		<artifactId>spring-boot-starter-validation</artifactId> 
		</dependency>
        	<dependency>
            		<groupId>org.mindrot</groupId>
            		<artifactId>jbcrypt</artifactId>
            		<version>0.4</version>
        	</dependency>

3. Add following to application.properties

spring.mvc.view.prefix=/WEB-INF/
spring.datasource.url=jdbc:mysql://localhost:3306/<<YOUR_SCHEMA>>
spring.datasource.username=<<dbuser>>
spring.datasource.password=<<dbpassword>>
spring.datasource.driver-class-name=com.mysql.jdbc.Driver
spring.jpa.hibernate.ddl-auto=update
spring.mvc.hiddenmethod.filter.enabled=true

4. Create new Schema in MySQL Workbench (UTF-8)

5. Build Model (http://learn.codingdojo.com/m/59/5657/37463)

	-com.[PACKAGE NAME].models
	-[MODEL NAME].java (New Class)
	-Copy/Paste the following:

@Id
@GeneratedValue(strategy=GenerationType.IDENTITY)
private Long id;

@Column(updatable=false)
@DateTimeFormat(pattern="yyyy-MM-dd")
private Date createdAt;
@DateTimeFormat(pattern="yyyy-MM-dd")
private Date updatedAt;

@PrePersist
protected void onCreate(){
    this.createdAt = new Date();
}
@PreUpdate
protected void onUpdate(){
    this.updatedAt = new Date();
}

	-Generate Necessary Constructors
	-Generate Getters and Setters (All Fields)

**Additional Notes for Relationships**

ONE TO ONE:

Model 1 (Person):

    @OneToOne(mappedBy="person", cascade=CascadeType.ALL, fetch=FetchType.LAZY)
    private License license;

Model 2 (License):

    @OneToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="person_id")
    private Person person;

ONE TO MANY:
	
Model 1 (Dojo):

    @OneToMany(mappedBy="dojo", fetch = FetchType.LAZY)
    private List<Ninja> ninjas;

Model 2 (Ninja):

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name="dojo_id")
    private Dojo dojo;

MANY TO MANY:

Model 1 (Product):

    @ManyToMany(fetch = FetchType.LAZY)
    @JoinTable(
        name = "categories_products", 
        joinColumns = @JoinColumn(name = "product_id"), 
        inverseJoinColumns = @JoinColumn(name = "category_id")
    )
    private List<Category> categories;

Model 2 (Category):

    @ManyToMany(fetch = FetchType.LAZY)
    @JoinTable(
        name = "categories_products", 
        joinColumns = @JoinColumn(name = "category_id"), 
        inverseJoinColumns = @JoinColumn(name = "product_id")
    )
    private List<Product> products;

6. Build Repository (http://learn.codingdojo.com/m/59/5657/37403)

	-com.[PACKAGE NAME].repositories
	-[MODEL]Repository.java (New Interface)
	-add "extends CrudRepository<[MODEL], Long>"
	-add "List<[MODEL]> findAll();"
	-add additional necessary queries: https://docs.spring.io/spring-data/jpa/docs/current/reference/html/#jpa.query-methods.query-creation


	************
	| Template |
	************
	
	@Repository
	public interface [MODEL]Repository extends CrudRepository<[MODEL], Long>{
	    List<[MODEL]> findAll();
	}

	
7. Build Service (http://learn.codingdojo.com/m/59/5657/37394)

	-com.[PACKAGE NAME].services
	-[MODEL]Service.java (New Class)
	-add repository to class attributes
	-instantiate repository in constructor (@Autowired)
	-add necessary services (Start with 3: all[MODEL]s(); create[MODEL](); find[MODEL](Long id);

	************
	| Template |
	************

	@Autowired
	private [MODEL]Repository [model]Repository;
	
	public List<[MODEL]> all[MODEL]s(){
		return [model]Repository.findAll();
	}
	
	public [MODEL] create[MODEL]([MODEL] [model]){
		return [model]Repository.save([model]);
	}
	
	public [MODEL] find[MODEL](Long id){
		Optional<[MODEL]> optional[MODEL] = [model]Repository.findById(id);
		if(optional[MODEL].isPresent()) {
			return optional[MODEL].get();
		} else {
			return null;
		}
	}

8. Create /WEB-INF/ Folder

9. Create index.jsp File
	
	-add any needed JSP/JSTL tags:

	<%@taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core"%>
	<%@ taglib prefix="form" uri="http://www.springframework.org/tags/form"%>
	<%@ taglib prefix = "fmt" uri = "http://java.sun.com/jsp/jstl/fmt" %>
	<%@ page isErrorPage="true" %>
	

10. Build Controller

	-com.[PACKAGE NAME].controllers
	-[MODEL]Controller.java (New Class)
	-add service to class attributes
	-instantiate service in constructor

11. Make an app!

(Additional Resources)

Bootstrap CDN (paste in <head>):

<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-BmbxuPwQa2lc/FVzBcNJ7UAyJxM6wuqIj61tLrc4wSX0szH/Ev+nYRRuWlolflfl" crossorigin="anonymous">
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta2/dist/js/bootstrap.bundle.min.js" integrity="sha384-b5kHyXgcpbZJO/tY9Ul7kGkf1S0CWuKcCD38l8YkeH8z8QjE0GmW1gYU5S9FOnJ0" crossorigin="anonymous"></script>

JSTL Form:

https://docs.spring.io/spring-framework/docs/3.0.0.M3/reference/html/ch17s02.html

<%@ taglib prefix="form" uri="http://www.springframework.org/tags/form"%>    
<form:form action="/books" method="post" modelAttribute="book">
    <p>
        <form:label path="title">Title</form:label>
        <form:input path="title"/>
        <form:errors path="title"/>
    </p>  
    <input type="submit" value="Submit"/>
</form:form>

FORM SELECT (w/ forEach):

https://www.tutorialspoint.com/jsp/jstl_core_foreach_tag.htm

    <form:select path="dojo">
    	<c:forEach items="${dojos}" var="dojo">
		<form:option value="${dojo.id}">${dojo.name}</form:option>
    	</c:forEach>
    </form:select>

JSTL Delete (!!!!! MUST HAVE spring.mvc.hiddenmethod.filter.enabled=true ADDED TO application.properties OR THIS WILL NOT WORK!!!!!):

<form action="/books/${book.id}" method="post">
    <input type="hidden" name="_method" value="delete">
    <input type="submit" value="Delete">
</form>

Style JSTL Button like Link:

#notButton{
  background: none!important;
  border: none;
  padding: 0!important;
  font-family: arial, sans-serif;
  color: blue;
  text-decoration: underline;
  cursor: pointer;
  display: inline;
}


JSP / JSTL Format Date

<%@ taglib prefix = "fmt" uri = "http://java.sun.com/jsp/jstl/fmt" %>
<c:set var = "now" value = "${date}" />
